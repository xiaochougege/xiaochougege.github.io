<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World!</title>
    <url>/archives/1c291ca3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我的第一篇博客!!!</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础</title>
    <url>/archives/a4a81253.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p>
<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a><center>Linux基础</h1><hr>
<h2 id="一-Linux起源"><a href="#一-Linux起源" class="headerlink" title="一. Linux起源"></a>一. Linux起源</h2><h3 id="1-Linux历史"><a href="#1-Linux历史" class="headerlink" title="1.Linux历史"></a>1.Linux历史</h3><ul>
<li>1969年，美国 AT&amp;T 公司贝尔实验室开发了 UNIX 操作系统</li>
<li>1983年，理查德·斯托曼在MIT发起了GNU计划，并诞生了GPL</li>
<li>1991年，林纳斯·托瓦兹在大学时期编写并发布了Linux内核</li>
<li>随后诞生了许多基于Linux内核的操作系统，称作Linux发行版</li>
<li>Linunx的发行版非常多,例如：Debian,Red Hat等分支</li>
<li>其中Ubuntu因为其图形界面相对比较完善,对新手入门比较友好.</li>
<li>本篇博客示例皆以Ubuntu为例</li>
</ul>
<h3 id="2-身边的Linux"><a href="#2-身边的Linux" class="headerlink" title="2.身边的Linux"></a>2.身边的Linux</h3><ul>
<li>Android其实本质上是Linux的一个发行版;</li>
<li>平常的大多数服务器也是Linux的发行版;</li>
<li>嵌入式开发板常用Linux系统.</li>
</ul>
<hr>
<h2 id="二-选择Linux的原因"><a href="#二-选择Linux的原因" class="headerlink" title="二. 选择Linux的原因"></a>二. 选择Linux的原因</h2><ul>
<li>开源:由于Linux是一个开源的操作系统,参照Linux系统,可以加深自己对于操作系统的了解;</li>
<li>安全:Linux拥有广泛,规模较大的社区维护,并且基本上四年一次更新换代,bug可以及时得到修复;</li>
<li>稳定:跟window操作系统不一样,Linux系统具有较好的稳定性,可以不间断地运行很长一段时间,不会轻易出现诸如蓝屏警告的问题,所以Linux比较适合做服务器.</li>
<li>多数没有GUI界面:通过学习Linux系统,间接掌握shell的使用方法,同时习惯命令行之后,效率可以得到大幅提高.</li>
</ul>
<hr>
<h2 id="三-window下使用Linux"><a href="#三-window下使用Linux" class="headerlink" title="三. window下使用Linux"></a>三. window下使用Linux</h2><h3 id="1-虚拟机"><a href="#1-虚拟机" class="headerlink" title="1.虚拟机"></a>1.虚拟机</h3><p>虚拟机可以视为一个安全可靠的沙盒,通过虚拟机来使用有以下优点:</p>
<ul>
<li>独立:不影响当前操作系统的使用;</li>
<li>无需考验底层应用的兼容性;</li>
<li>方便试错,不会危害本机数据.<br><strong>安装虚拟机</strong>:</li>
<li>主流软件: VMware,virtual Box…</li>
<li>安装步骤: 点击这里</li>
</ul>
<h3 id="2-WSL"><a href="#2-WSL" class="headerlink" title="2.WSL"></a>2.WSL</h3><ul>
<li>WSL全名:Windows Subsystem for Linux</li>
<li>wsl可让开发人员直接在 Windows 上按原样运行 GNU&#x2F;Linux 环境（包括大多数命令行工具、实用工具和应用程序），且不会产生传统虚拟机或双启动设置开销</li>
<li>wsl1与wsl2的区别:</li>
<li>安装教程: 参考文档</li>
<li>开发环境配置: 参考文档</li>
</ul>
<h3 id="3-双系统-不推荐"><a href="#3-双系统-不推荐" class="headerlink" title="3.双系统(不推荐)"></a>3.双系统(不推荐)</h3><ul>
<li>在安装过程中不理解关键的选项（如：磁盘分区、挂载、交换空间<br>分配等）的意义，很容易做出错误的决定；</li>
<li>错误的配置可能导致自己原先本机上的操作系统和数据遭到不可逆<br>转的损坏；</li>
<li>部分硬件可能对安装的发行版缺少兼容，从而导致意外安装失败；</li>
<li>如果安装的过程中选择下载附加工具，可能会因为默认镜像在国外<br>而导致下载十分缓慢，从而让安装流程变得很漫长；</li>
</ul>
<hr>
<h2 id="四-连接Linux服务器"><a href="#四-连接Linux服务器" class="headerlink" title="四. 连接Linux服务器"></a>四. 连接Linux服务器</h2><ul>
<li>前提:拥有服务器和账号;</li>
<li>演示</li>
</ul>
<hr>
<h2 id="五-常见命令"><a href="#五-常见命令" class="headerlink" title="五. 常见命令"></a>五. 常见命令</h2><ul>
<li>目录结构: &#x2F;home&#x2F;username&#x2F;ding&#x2F;</li>
<li>显示当前的目录: pwd ———(print work directory)</li>
<li>当前目录新建文件夹: mkdir xxx.txt ——(make directory)</li>
<li>当前目录新建文件: touch xxx.c </li>
<li>进入指定目录: cd xxx,txt ————(change directory)</li>
<li>进入上一层目录: cd ..</li>
<li>查看当前目录文件: ls —————(list)</li>
<li>查看当前目录所有文件: ls -a ———(all)</li>
<li>列出文件详细信息: ls -l filename  —–(此处不会列出隐藏文件)</li>
<li>列出文件详细信息: ll —————(列出所有信息,包括隐藏的)</li>
<li>删除文件: rm a.cpp —————-(remove)</li>
<li>删除目录: rm -r filename</li>
<li>删库跑路: rm -rf &#x2F;*   ————–(注意)</li>
<li>移动文件: mv a.cpp filename&#x2F;</li>
<li>复制文件: cp a.pp filename&#x2F;</li>
<li>复制目录下所有文件: cp -r a filename</li>
<li>清屏: clear</li>
<li>显示最近执行的n条命令: history n</li>
<li>执行历史命令: !!+id</li>
<li>查看文件内容: cat a.cpp</li>
<li>输出: echo hello,world!</li>
<li>覆盖: echo ‘hello,world’ &gt; a.txt</li>
<li>追加: echo ‘welcome!’ &gt;&gt; a.txt</li>
<li>安装软件包: apt install g++</li>
<li>更新: apt update <name></li>
<li>查找: apt search <name></li>
<li>删除: apt remove <name></li>
<li>提升权限: sudo apt install g++</li>
</ul>
<hr>
<h2 id="六-vim"><a href="#六-vim" class="headerlink" title="六. vim"></a>六. vim</h2><p>vim是从vi发展而来的一个文本编辑器，对于编写程序比较方便。作为一门古老的文本编辑器,使用Vim可以大大提高编程效率.同时,<strong>它的学习成本颇为高昂</strong>.<br><em>学习vim是一个曲折的过程,但是如果仅仅只是作为了解并粗略使用的话,熟悉以下流程图就足够了.</em></p>
<ul>
<li>i 切换到输入模式，可以修改文件内容</li>
<li>r 切换到取代模式，可以修改文件内容</li>
<li>Esc从输入模式退出到命令模式</li>
<li>在命令模式下:<ul>
<li>输入:q 不保存退出</li>
<li>输入:w 保存</li>
<li>输入:wq 保存并退出</li>
<li>输入:wq! 强制保存并退出</li>
</ul>
</li>
</ul>
<p><em>以下vim的键盘图,感兴趣的可以尝试研究,但我认为作为一门工具,如果学习成本过高,这门工具学习的优先度不高</em></p>
<hr>
<h2 id="七-SSH"><a href="#七-SSH" class="headerlink" title="七. SSH"></a>七. SSH</h2><ul>
<li><p>SSH(Secure Shell) 是建立在应用层基础上的安全协议，可以用其远程登录服务器&#x2F;其他电脑;</p>
</li>
<li><p>SSH的登录流程(可参考计算机网络的第七章内容)</p>
</li>
<li><p>本地生成密钥</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li>
<li><p>将公钥添加到&#x2F;home&#x2F;user&#x2F;.ssh&#x2F;authorized_keys即可免密登录</p>
</li>
<li><p>ssh remote_username@remote_address</p>
<ul>
<li>ssh remote_username是服务器端的用户名</li>
<li>remote_address是服务器地址,可以是ip&#x2F;域名</li>
</ul>
</li>
<li><p>SCP(Secure Copy)是Linux系统下基于SSH登陆进行安全的远程文件拷贝<br>命令。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp remote_username@remote_address:remote_filename local_folder//从服务器拷贝到本地</span><br><span class="line"></span><br><span class="line">scp local_file remote_username@remote_address:remote_folder//•从本地拷贝到服务器</span><br><span class="line"></span><br><span class="line">scp –r local_file remote_username@remote_address:remote_folder//对于文件夹需加参数-r</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="八-文件权限"><a href="#八-文件权限" class="headerlink" title="八. 文件权限"></a>八. 文件权限</h2><ul>
<li><p>Linux文件权限分为三级:文件所有者(owner)、用户组(group)、<br>其他用户(other users)</p>
</li>
<li><p>查看权限:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l</span><br><span class="line">ll</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如图所示:</p>
<p>解读:</p>
<ul>
<li><p>首位表示文件类型</p>
<ul>
<li>d:文件夹</li>
<li>-:文件</li>
</ul>
</li>
<li><p>接下来每三位一组，分别代表所有者、用户组、其他用户的权限</p>
</li>
<li><p>每一组可以使用八进制数表示，也可以使用形如g&#x3D;rx表示</p>
<ul>
<li>u(user) g(group) o(others) a(all)</li>
</ul>
</li>
<li><p>chmod(change mode)是用来控制用户对文件的权限的命令</p>
</li>
<li><p>注意:只有文件所有者和超级管理员才可以修改权限</p>
</li>
<li><p>如何修改权限:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.使用字符:</span><br><span class="line">chmod a+r filename (等价于 chmod ugo+r filename)</span><br><span class="line">chmod u+w filename </span><br><span class="line">chmod ug+x,o-w filename </span><br><span class="line">chmod ug=rw,o=rx filename </span><br><span class="line">2.使用八进制数:</span><br><span class="line">chmod 777 filename (等价于 chmod a=rwx filename)</span><br><span class="line">chmod 700 filename (等价于 chmod u=rwx,go= filename)</span><br></pre></td></tr></table></figure>
<hr>
</li>
</ul>
<h2 id="九-tmux"><a href="#九-tmux" class="headerlink" title="九. tmux"></a>九. tmux</h2><ul>
<li>以前我们应该经常在电影中看到黑客们屏幕前滚动的帅气的终端窗口,tmux(terminal multiplexer)是一个终端复用器,它能实现在终端中同时运行多个会话,大大提高效率.</li>
<li>会话(session):每次打开终端窗口(window)，输入命令。这种<br>用户与计算机临时的交互，称作一次“会话”。每个会话都是一<br>个独立工作区，包含一到多个窗口。</li>
<li>会话的一个特点是，窗口与其中启动的进程绑定。</li>
<li>tmux的一些基本操作:</li>
<li>安装tmux:sudo apt install tmux</li>
<li>打开tmux:tmux</li>
<li>退出tmux界面<ul>
<li>Ctrl+b后再输入d</li>
<li>Ctrl+d</li>
<li>输入exit</li>
<li>前缀键:输入Ctrl+b后，再输入的指令才会生效</li>
</ul>
</li>
<li>新建会话:tmux new -s <session_name></li>
<li>分离会话<ul>
<li>tmux detach</li>
<li>Ctrl+b d</li>
</ul>
</li>
<li>查看所有会话:tmux ls</li>
<li>接入会话: tmux attach –t <session_name></li>
<li>杀死会话:tmux kill-session -t <session_name></li>
<li>切换会话:tmux switch -t <session_name></li>
<li>重命名会话<ul>
<li>tmux rename-session -t 0 <new_name></li>
<li>Ctrl+b $ 重命名当前会话</li>
</ul>
</li>
<li>新建窗口: Ctrl+b c</li>
<li>切换窗口<ul>
<li>Ctrl+b num</li>
<li>Ctrl+b p</li>
<li>Ctrl+b n</li>
</ul>
</li>
<li>窗口划分<ul>
<li>Ctrl+b “ 上下</li>
<li>Ctrl+b % 左右</li>
<li>Ctrl+b +上下左右 切换pane</li>
</ul>
</li>
</ul>
<hr>
<h2 id="十-其他"><a href="#十-其他" class="headerlink" title="十. 其他"></a>十. 其他</h2><ul>
<li>环境变量<ul>
<li>指的是在操作系统中用来指定操作系统运行环境的一些参数，如系统文<br>件夹的位置</li>
<li>当系统执行一个程序而没有告知程序所在的完整路径时，系统除了在当前文件夹下寻找外，还会前往PATH指定路径中寻找。</li>
</ul>
</li>
<li>Linux下环境变量<ul>
<li>echo $PATH可以查看当前PATH环境变量<br>环境变量存放在~&#x2F;.bashrc中</li>
<li>source <del>&#x2F;.bashrc可以立即启用<br>每次打开shell都会执行</del>&#x2F;.bashrc</li>
</ul>
</li>
<li>内部命令 &#x2F;bin<ul>
<li>shell自带的命令，例如cd&#x2F;echo&#x2F;kill</li>
<li>效率比较高</li>
<li>内置有说明文档, help cd</li>
</ul>
</li>
<li>外部命令<ul>
<li>自己写的shell脚本，以及find等命令</li>
</ul>
</li>
<li>判断<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type cd</span><br><span class="line">type find</span><br></pre></td></tr></table></figure></li>
<li>挂起与恢复进程:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+z//可以将在前台运行的命令放到后台，并暂停</span><br><span class="line">jobs//可以查看当前在后台运行的命令</span><br><span class="line">fg %num//将后台命令调至前台</span><br><span class="line">bg %num//将后台暂停的进程在后台执行</span><br><span class="line">kill %num//终止命令编号为num的进程</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>web_lab</tag>
      </tags>
  </entry>
</search>
